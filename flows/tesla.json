[
    {
        "id": "ec17eebe56a5b333",
        "type": "tab",
        "label": "Tesla",
        "disabled": false,
        "info": ""
    },
    {
        "id": "19cc5ae16ca494c6",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "state changes",
        "func": "let new_state = msg.payload;\nlet previous_state = flow.get('state');\n\n//node.warn(msg.topic + \": \" + msg.payload);\n//flow.set(msg.topic, new_state);\n\nif (previous_state !== new_state){\n    if (new_state === \"online\"){\n        msg.topic = `‚ú® est√° despierto`;\n    }else if (new_state === \"asleep\"){\n        msg.topic = `üí§ est√° dormido`;\n        flow.set('sent_resumen','0');\n    }else if (new_state === \"suspended\"){\n        msg.topic = `üõèÔ∏è est√° durmi√©ndose`;\n    }else if (new_state === \"charging\"){\n        msg.topic = `üîå est√° cargando`;\n    }else if (new_state === \"offline\"){\n        msg.topic = `üõ∞Ô∏è no est√° conectado`;\n    }else if (new_state === \"start\"){\n        msg.topic = `üöÄ est√° arrancando`;\n    }else if (new_state === \"driving\"){\n        msg.topic = `üèÅ est√° en marcha`;\n    }else{\n        msg.topic = `‚≠ï con estado desconocido`;\n    }\n}else{\n    return;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nflow.set('state','asleep');\nflow.set('sent_resumen','1');",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 260,
        "wires": [
            [
                "c0ecaad47a7cf0a4"
            ]
        ]
    },
    {
        "id": "7f48d1af0e320734",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "Format message",
        "func": "let display_name = flow.get('display_name');\n\nmsg.payload = {\n    chatId: flow.get('telegram_chatId'),\n    type: 'message',\n    content: `<b>${display_name}</b> ${msg.topic}`\n}\nmsg.payload.options = {parse_mode : \"HTML\", disable_web_page_preview: true};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 280,
        "wires": [
            [
                "6e5d983ad3f24957"
            ]
        ]
    },
    {
        "id": "6e5d983ad3f24957",
        "type": "telegram sender",
        "z": "ec17eebe56a5b333",
        "name": "Status messages",
        "bot": "ed12f72a.03fad",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1010,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "e2527437bfb6feac",
        "type": "switch",
        "z": "ec17eebe56a5b333",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "state",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_version",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 300,
        "wires": [
            [
                "19cc5ae16ca494c6"
            ],
            [
                "8b4e1c1ddfe303a4"
            ]
        ]
    },
    {
        "id": "8b4e1c1ddfe303a4",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "update",
        "func": "let payload = msg.payload;\nlet current_version = flow.get('software_current_version');\nlet new_version = flow.get('software_new_version');\n\n//node.warn(msg.topic + \": \" + msg.payload);\n\nif (payload !== \"\" && payload !== current_version && payload !== new_version){\n    msg.topic = `üéÅ tiene actualizaci√≥n disponible: <a href=\"https://www.notateslaapp.com/software-updates/version/${payload}/release-notes\"><i>${payload}</i></a>`;\n    //flow.set('software_new_version', payload);\n}else{\n    return;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 320,
        "wires": [
            [
                "7f48d1af0e320734"
            ]
        ]
    },
    {
        "id": "c0ecaad47a7cf0a4",
        "type": "link out",
        "z": "ec17eebe56a5b333",
        "name": "change-state",
        "mode": "link",
        "links": [
            "f817850fcd58c124"
        ],
        "x": 585,
        "y": 180,
        "wires": []
    },
    {
        "id": "c5964945b20914ba",
        "type": "delay",
        "z": "ec17eebe56a5b333",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 600,
        "wires": [
            [
                "83e2d9bd36f60d76"
            ]
        ]
    },
    {
        "id": "1f304f0624224c66",
        "type": "switch",
        "z": "ec17eebe56a5b333",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "charging",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "driving",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "parked",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "online",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 170,
        "y": 840,
        "wires": [
            [
                "d73261814ab8e538"
            ],
            [
                "1f130cd0d1818594"
            ],
            [
                "b23e320ab1d0869d"
            ],
            [
                "b23e320ab1d0869d"
            ],
            [
                "82a8d89db923d127"
            ]
        ]
    },
    {
        "id": "1f130cd0d1818594",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "set parameters",
        "func": "const USER_TOKEN = flow.get('abrp_user_token');\nconst CAR_MODEL = flow.get('abrp_car_model');\nconst API_KEY = flow.get('abrp_api_key');\n\nlet data = {\n    utc: Math.floor(Date.now() / 1000),\n    soc: flow.get('usable_battery_level') || 0,\n    power: flow.get('power') || 0,\n    speed: flow.get('speed') || 0,\n    lat: flow.get('latitude') || 0,\n    lon: flow.get('longitude') || 0,\n    is_charging: false,\n    is_dcfc: false,\n    is_parked: false,\n    heading: flow.get('heading') || 0,\n    elevation: flow.get('elevation') || 0,\n    ext_temp: flow.get('outside_temp') || 0,\n    voltage: flow.get('charger_voltage') || 0,\n    current: flow.get('charger_actual_current') || 0,\n    odometer: flow.get('odometer') || 0,\n    est_battery_range: flow.get('rated_battery_range_km') || 0,\n    kwh_charged: flow.get('charge_energy_added') || 0,\n    car_model: CAR_MODEL\n};\nlet state = flow.get('state');\n\nswitch(state) {\n    case 'driving':\n        data.is_parked = false\n        data.is_charging = false\n        data.is_dcfc = false\n        break;\n    case 'charging':\n        data.is_parked = true\n        data.is_charging = true\n        data.is_dcfc = true\n        break;\n    default:\n        data.is_parked = true\n        data.is_charging = false\n        data.is_dcfc = false\n}\n\nif (parseInt(flow.get('charger_power') > 0)){\n    data.is_charging = true\n}\n\nswitch (flow.get('shift_state')) {\n    case 'P':\n    case 'N':\n        data.is_parked = true\n        break;\n    case 'D':\n    case 'R':\n        data.is_parked = false\n        break;\n}\n\nif (state !== \"charging\"){\n    delete data.kwh_charged;\n    delete data.voltage;\n}\n\nmsg.headers={ \n    'Content-Type': 'application/json',\n    'Authorization': 'APIKEY ' + API_KEY\n};\n//msg.payload = {};\nmsg.payload = {tlm: data};\nmsg.userToken = USER_TOKEN;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 860,
        "wires": [
            [
                "14a7f7a37daf24a5"
            ]
        ]
    },
    {
        "id": "14a7f7a37daf24a5",
        "type": "http request",
        "z": "ec17eebe56a5b333",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.iternio.com/1/tlm/send?token={{userToken}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1050,
        "y": 840,
        "wires": [
            [
                "142317b059a97879"
            ]
        ]
    },
    {
        "id": "83e2d9bd36f60d76",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "get car state",
        "func": "let previous_state = flow.get('previous_state');\nlet current_state = flow.get('state');\n\n//node.warn(previous_state + \" : \" + current_state);\n\nif (previous_state !== current_state){\n    flow.set('previous_state', current_state);\n    flow.set('i', 300);\n}\n\nmsg.payload = current_state;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 600,
        "wires": [
            [
                "1f304f0624224c66"
            ]
        ]
    },
    {
        "id": "f817850fcd58c124",
        "type": "link in",
        "z": "ec17eebe56a5b333",
        "name": "abrp",
        "links": [
            "c0ecaad47a7cf0a4"
        ],
        "x": 625,
        "y": 540,
        "wires": [
            [
                "83e2d9bd36f60d76"
            ]
        ]
    },
    {
        "id": "82a8d89db923d127",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "set counter",
        "func": "let i=parseInt(flow.get('i'));\ni +=1;\n\nif (i > 300){\n    i = 0;\n}\n\nflow.set('i',i);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('previous_state', 'asleep');\nflow.set('i', -1)",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 600,
        "wires": [
            [
                "c5964945b20914ba"
            ]
        ]
    },
    {
        "id": "5ccf6820b737c553",
        "type": "inject",
        "z": "ec17eebe56a5b333",
        "name": "Start ABRP",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "82a8d89db923d127"
            ]
        ]
    },
    {
        "id": "142317b059a97879",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "reset counter",
        "func": "let i=parseInt(flow.get('i'));\n\nif (i > 30){\n    flow.set('i',-1);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 720,
        "wires": [
            [
                "82a8d89db923d127"
            ]
        ]
    },
    {
        "id": "d73261814ab8e538",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "delay 10 segs",
        "func": "let i=parseInt(flow.get('i'));\n\nif (i % 2 === 0){\n    msg.payload = true;\n}else{\n    msg.payload = false;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 800,
        "wires": [
            [
                "10d16ed647feb51d"
            ]
        ]
    },
    {
        "id": "b23e320ab1d0869d",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "delay 2,5 min",
        "func": "let i=parseInt(flow.get('i'));\n\n//node.warn(\"Valor de 'i': \" + i);\n\nif (i % 30 === 0){\n    msg.payload = true;\n}else{\n    msg.payload = false;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 880,
        "wires": [
            [
                "10d16ed647feb51d"
            ]
        ]
    },
    {
        "id": "10d16ed647feb51d",
        "type": "switch",
        "z": "ec17eebe56a5b333",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 760,
        "wires": [
            [
                "1f130cd0d1818594"
            ],
            [
                "142317b059a97879"
            ]
        ]
    },
    {
        "id": "17c47461b2242f6d",
        "type": "mqtt in",
        "z": "ec17eebe56a5b333",
        "name": "",
        "topic": "teslamate/cars/1/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "acbce132.6eef4",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "7697a10146e64a64"
            ]
        ]
    },
    {
        "id": "111f31a1e35aefeb",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "short topic",
        "func": "var short_topic = msg.topic.substring(17);\nmsg.topic = short_topic;\nflow.set(msg.topic, msg.payload);\n//node.warn(msg.topic + \": \" + msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 240,
        "wires": [
            [
                "e2527437bfb6feac"
            ]
        ]
    },
    {
        "id": "82af5994b41f93bd",
        "type": "comment",
        "z": "ec17eebe56a5b333",
        "name": "MQTT to Telegram",
        "info": "",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "5d44b1df05d63a7c",
        "type": "comment",
        "z": "ec17eebe56a5b333",
        "name": "MQTT to ABRP",
        "info": "",
        "x": 120,
        "y": 500,
        "wires": []
    },
    {
        "id": "5e49a2b62522c708",
        "type": "telegram command",
        "z": "ec17eebe56a5b333",
        "name": "/hola",
        "command": "/hola",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "ed12f72a.03fad",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": true,
        "outputs": 1,
        "x": 570,
        "y": 1120,
        "wires": [
            [
                "920747ae205dc8b1",
                "9091f925f8d0a46d"
            ]
        ]
    },
    {
        "id": "4dbef57329e1e66b",
        "type": "telegram event",
        "z": "ec17eebe56a5b333",
        "name": "",
        "bot": "ed12f72a.03fad",
        "event": "callback_query",
        "autoanswer": false,
        "x": 100,
        "y": 1340,
        "wires": [
            [
                "be7157e61e51e6b0",
                "6f5060a206a9e6d6"
            ]
        ]
    },
    {
        "id": "be7157e61e51e6b0",
        "type": "switch",
        "z": "ec17eebe56a5b333",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "summary_global",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "summary_recharge",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 1340,
        "wires": [
            [
                "c2af1d558f1c3e2d"
            ],
            [
                "ab6cd7fc8bbec45e"
            ]
        ]
    },
    {
        "id": "c2af1d558f1c3e2d",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "global summary",
        "func": "/* temporarly disable */\n//return;\n\n\nlet bat = '';\nlet geo = '';\nlet state = '';\nlet inside_temp = flow.get('inside_temp');\nlet outside_temp = flow.get('outside_temp');\nlet battery_level = flow.get('battery_level');\nlet usable_battery_level = flow.get('usable_battery_level');\nlet geofence = flow.get('geofence');\nlet latitude = flow.get('latitude');\nlet longitude = flow.get('longitude');\nlet last_status_change = new Date(flow.get('since'));\nlet sentry_mode = '';\n\nfunction calc_difference(){\n  let diffInMilliSeconds = Math.abs(new Date().getTime() - new Date(flow.get('since')).getTime()) / 1000;\n\n  // calculate days\n  const days = Math.floor(diffInMilliSeconds / 86400);\n  diffInMilliSeconds -= days * 86400;\n\n  // calculate hours\n  const hours = Math.floor(diffInMilliSeconds / 3600) % 24;\n  diffInMilliSeconds -= hours * 3600;\n\n  // calculate minutes\n  const minutes = Math.floor(diffInMilliSeconds / 60) % 60;\n  diffInMilliSeconds -= minutes * 60;\n\n  let difference = '';\n  if (days > 0) {\n    difference += `${days}d `;\n  }\n  if (hours > 0) {\n    difference += `${hours}h `;\n  }\n\n  difference += `${minutes}m`;\n\n  return difference;\n\n}\n\nfunction toFloat(num, precision){\n  return parseFloat(num).toFixed(precision);\n}\n\n/**\n* @param {number} percent\n*/\nfunction getBatteryIcon(percent){\n  let ico = `üîã `;\n  if (percent <= 40) {\n    ico = `ü™´ `;\n  }\n  return ico;\n}\n\nswitch(flow.get('state')) {\n  case \"online\":\n    state = 'Despierto'\n    break;\n  case \"asleep\":\n    state = `Dormido hace ${calc_difference()}`\n    break;\n  case \"suspended\":\n    state = `Durmi√©ndose desde hace ${calc_difference()}`\n    break;\n  case \"charging\":\n    state = 'Cargando'\n    break;\n  case \"offline\":\n    state = 'Desconectado'\n    break;\n  case \"start\":\n    state = 'Arrancando'\n    break;\n  case \"driving\":\n    state = 'Conduciendo'\n    break;\n  case \"updating\":\n    state = `Actualizando durante ${calc_difference()}`;\n    break;\n  default:\n    state = 'Desconocido'\n}\n\nbat = getBatteryIcon(usable_battery_level);\nif (usable_battery_level !== battery_level){\n  bat += ` Usable ${usable_battery_level}% (disponible ${battery_level}%) - ${flow.get('rated_battery_range_km')} km`;\n}else{\n  bat += ` Disponible ${usable_battery_level}% - ${flow.get('rated_battery_range_km')} km`;\n}\n\nif (geofence !== \"\" && geofence !== undefined){\n  geo = `Est√° en <a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">${geofence}</a>`;\n}else{\n  geo = `Est√° en <a href=\"https://maps.google.com/maps?q=${latitude},${longitude}\">Lat: ${latitude}, Long: ${longitude}</a>`;\n}\n\nif (flow.get('sentry_mode') === \"true\"){\n  sentry_mode = `üü¢  Centinela activado`;\n}else{\n  sentry_mode = `‚ö´Ô∏è  Centinela desactivado`;\n}\n    \nmsg.topic = `*** Resumen general ***\n\n    üíø  <a href=\"https://www.notateslaapp.com/software-updates/version/${flow.get('version')}/release-notes\">${flow.get('version')}</a> ${(flow.get('update_available') === 'true') ? `(disponible <a href=\"https://www.notateslaapp.com/software-updates/version/${flow.get('update_version')}/release-notes\"><i>${flow.get('update_version')}</i></a>)` : ''}\n    üöó  ${state}\n    ‚öôÔ∏è  ${Intl.NumberFormat('es-ES').format(parseInt(flow.get('odometer')))} km\n    üîê  ${(flow.get('locked') === \"true\")? 'Cerrado' : 'Abierto' }\n    ${bat}\n    üõû  Presi√≥n de las ruedas:\n              ${toFloat(flow.get('tpms_pressure_fl'), 3)} --- ${toFloat(flow.get('tpms_pressure_fr'), 3)}\n              ${toFloat(flow.get('tpms_pressure_rl'), 3)} --- ${toFloat(flow.get('tpms_pressure_rr'), 3)}\n    üå°Ô∏è  Interior ${inside_temp}¬∫C\n    üå°Ô∏è  Exterior ${outside_temp}¬∫C\n    üåé  ${geo}\n    ${sentry_mode}\n`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1220,
        "wires": [
            [
                "9091f925f8d0a46d"
            ]
        ]
    },
    {
        "id": "d39786deb2d6941d",
        "type": "telegram sender",
        "z": "ec17eebe56a5b333",
        "name": "send response",
        "bot": "ed12f72a.03fad",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1240,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "b621667ba09219e2",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "format message",
        "func": "let content = ((msg.topic !== undefined)? msg.topic : '') + `\n*** Opciones disponibles ***\n`;\n\nlet opts = {\n    parse_mode : \"HTML\",\n    disable_web_page_preview: true,\n    reply_markup: msg.buttons\n};\n\nmsg.payload = {\n    chatId: flow.get('telegram_chatId'),\n    type: 'message',\n    options: opts,\n    content: content\n}\n\nreturn [ msg ] ;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1340,
        "wires": [
            [
                "d39786deb2d6941d",
                "6a4696e8856db0c5"
            ]
        ]
    },
    {
        "id": "ab6cd7fc8bbec45e",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "recharge summary",
        "func": "/* temporarly disable */\n//return;\n\nlet state = flow.get(\"state\");\nlet bat = '';\nlet battery_level = flow.get('battery_level');\nlet usable_battery_level = flow.get('usable_battery_level');\n\nif (usable_battery_level !== battery_level){\n    bat = `Bater√≠a usable ${usable_battery_level}% (<i>${battery_level}%</i>) - ${flow.get('rated_battery_range_km')}km`;\n}else{\n    bat = `Bater√≠a disponible ${usable_battery_level}% - ${flow.get('rated_battery_range_km')}km`;\n}\n\nif (state === \"charging\"){\n\n    // Remaining\n    let time_to_full = flow.get(\"time_to_full_charge\");\n    let now = Math.round(Date.now()/1000);\n    let remaining = time_to_full.split('.');\n    let minutes = Math.ceil(60 * Number(\".\" + remaining[1]));\n    let total_minutes = (remaining[0]*60)+minutes;\n    let finish_date = Date.now() + (total_minutes*60000);\n    let new_date = new Date(finish_date);\n    let str_new_date = new_date.toLocaleTimeString('es-ES', {timeZone: 'Europe/Madrid', hour12: false, hour: '2-digit', minute: '2-digit' })\n    \n    let how_long = \"\";\n    if(remaining[0] > 0){\n        how_long = `${remaining[0]}h ${minutes}m`\n    } else {\n        how_long = `${minutes}m`\n    }\n    \n    let voltage = \"\";\n    let amps = \"\";\n    let chargeType = '';\n    if (parseInt(flow.get(\"charger_voltage\")) === 2){\n        chargeType = `DC`;\n    }else{\n        chargeType = `AC ${(flow.get(\"charger_phases\") === \"1\")? 'monof√°sica' : 'trif√°sica'}`;\n        \n        voltage = `‚ö°Ô∏è Voltaje: ${flow.get(\"charger_voltage\")}V`;\n        amps = `‚ö°Ô∏è Intensidad: ${flow.get(\"charger_actual_current\")}A`;\n    }\n    \n    msg.topic = `*** Resumen carga ***\n    \n        üîå  Cargando en ${chargeType} a ${Math.abs(flow.get(\"power\"))}kW\n        ü™´  ${bat}\n        üîã  L√≠mite de carga ${flow.get(\"charge_limit_soc\")}%\n        ‚åõÔ∏è  Tiempo para finalizar carga: ${how_long} \n        ‚è∞  Hora de finalizaci√≥n carga: ${str_new_date}\n    `;\n\n    if (parseInt(flow.get(\"charger_voltage\")) !== 2) {\n        msg.topic += `    ${voltage}\n        ${amps}\n        üîã ${flow.get(\"charge_energy_added\")}kWh a√±adidos\n        `;\n    }else{\n        msg.topic += `    üîã ${flow.get(\"charge_energy_added\")}kWh a√±adidos\n        `;\n    }\n\n}else{\n    msg.topic = `*** Resumen carga ***\n    \n        ü™´ ${bat}\n        üîã L√≠mite de carga ${flow.get(\"charge_limit_soc\")}%\n        üîã ${flow.get(\"charge_energy_added\")}kWh a√±adidos en la √∫ltima carga\n        üîå Cable ${(flow.get(\"plugged_in\") === \"true\")? \"conectado\" : \"no conectado\"}\n    `;\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1280,
        "wires": [
            [
                "9091f925f8d0a46d"
            ]
        ]
    },
    {
        "id": "6a4696e8856db0c5",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "remove last messageId",
        "func": "//node.warn(\"messageId : \" + context.global.keyboard.messageId);\nif (context.global.keyboard.messageId !== undefined){\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.global.keyboard.messageId;\n    context.global.keyboard.messageId = null;\n}\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1160,
        "wires": [
            [
                "fd0defe14d8d826e"
            ]
        ]
    },
    {
        "id": "a372618373284919",
        "type": "telegram sender",
        "z": "ec17eebe56a5b333",
        "name": "send response",
        "bot": "ed12f72a.03fad",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1360,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "920747ae205dc8b1",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "save messageId",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1120,
        "wires": [
            [
                "6a4696e8856db0c5"
            ]
        ]
    },
    {
        "id": "7b6729cd4369d53f",
        "type": "comment",
        "z": "ec17eebe56a5b333",
        "name": "Bot Telegram",
        "info": "",
        "x": 110,
        "y": 1060,
        "wires": []
    },
    {
        "id": "9091f925f8d0a46d",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "set buttons",
        "func": "let keyboards = {\n    'generic': {\n        \"inline_keyboard\": [\n            [\n                {\n                    \"text\": \"Resumen general\",\n                    \"callback_data\": \"summary_global\"            \n                },\n                {\n                    \"text\": `${(flow.get(\"state\") === \"charging\")? \"üü¢\" : \"üî¥\"} Resumen carga`,\n                    \"callback_data\": \"summary_recharge\"            \n                }\n            ]\n        ]\n    },\n    'controls': {\n        \"inline_keyboard\": [\n            [\n                {\n                    \"text\": \"Abrir coche\",\n                    \"callback_data\": \"controls_lock\"            \n                }\n            ],\n            [\n                {\n                    \"text\": `Frunk`,\n                    \"callback_data\": \"controls_frunk\"            \n                },\n                {\n                    \"text\": \"Maletero\",\n                    \"callback_data\": \"controls_trunk\"            \n                },\n                {\n                    \"text\": `Puerto de carga`,\n                    \"callback_data\": \"controls_charge_port\"            \n                }\n            ],\n            [\n                {\n                    \"text\": `R√°faga luces`,\n                    \"callback_data\": \"controls_flash_lights\"            \n                },\n                {\n                    \"text\": \"Tocar claxon\",\n                    \"callback_data\": \"controls_honk_horn\"            \n                },\n                {\n                    \"text\": `Arrancar coche`,\n                    \"callback_data\": \"controls_remote_start\"            \n                }\n            ],\n            [\n                {\n                    \"text\": `Volver`,\n                    \"callback_data\": \"back\"\n                }\n            ]\n        ]\n    },\n    'security': {\n        \"inline_keyboard\": [\n            [\n                {\n                    \"text\": \"Resumen general\",\n                    \"callback_data\": \"resume\"            \n                },\n                {\n                    \"text\": `${(flow.get(\"state\") === \"charging\")? \"üü¢\" : \"üî¥\"} Resumen carga`,\n                    \"callback_data\": \"recharge\"            \n                }\n            ],\n            [\n                {\n                    \"text\": `Volver`,\n                    \"callback_data\": \"back\"\n                }\n            ]\n        ]\n    }\n};\n\nlet selectedKeyboard = {};\n\nif (keyboards[msg.payload.content] !== undefined){\n    selectedKeyboard = keyboards[msg.payload.content];\n}else{\n    selectedKeyboard = keyboards['generic'];\n}\n\nmsg.buttons = JSON.stringify(selectedKeyboard);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1340,
        "wires": [
            [
                "b621667ba09219e2"
            ]
        ]
    },
    {
        "id": "6f5060a206a9e6d6",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "save messageId",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "fd0defe14d8d826e",
        "type": "switch",
        "z": "ec17eebe56a5b333",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1330,
        "y": 1160,
        "wires": [
            [],
            [
                "a372618373284919"
            ]
        ]
    },
    {
        "id": "7697a10146e64a64",
        "type": "function",
        "z": "ec17eebe56a5b333",
        "name": "variables",
        "func": "\n// Telegram\nflow.set('telegram_chatId', 'XXXXXX');\n\n// ABRP\nflow.set('abrp_user_token', 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX');\nflow.set('abrp_car_model', 'tesla:m3:20:bt37_21:heatpump');\nflow.set('abrp_api_key', '32b2162f-9599-4647-8139-66e9f9528370');\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 180,
        "wires": [
            [
                "111f31a1e35aefeb"
            ]
        ]
    },
    {
        "id": "ed12f72a.03fad",
        "type": "telegram bot",
        "botname": "pmb_tesla_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false,
        "info": "159696647614"
    },
    {
        "id": "acbce132.6eef4",
        "type": "mqtt-broker",
        "name": "mosquitto",
        "broker": "192.168.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]